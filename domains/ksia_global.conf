{
  domain_names = {
    ksia_global = 'Kiwinet Å iauliai 2.4Ghz - 4ch, 5Ghz - 44ch'
  },

  -- 32 bytes of random data, encoded in hexadecimal
  -- This data must be unique among all sites and domains!
  -- Can be generated using: echo $(hexdump -v -n 32 -e '1/1 "%02x"' </dev/urandom)
  domain_seed = 'f3ba9f2a4f1c0515bd36a3dc99251466d68d317eded1d78cadaa7b627f512e06',

  -- Prefixes used within the mesh. Both are required.
  prefix4 = '10.10.16.0/22',
  prefix6 = 'fd10:b4dc:4b1e::/64',

  -- Wireless configuration for 2.4 GHz interfaces.
  wifi24 = {
    -- Wireless channel.
    channel = 4,
    htmode = 'HT40+',
    -- supported_rates = {9000, 12000, 18000, 24000, 36000, 48000, 54000},
    -- basic_rate = {9000, 18000, 36000, 54000},
    distance = 50,
    require_mode = 'g',
    tx_power = 30,
    htmode_noscan = 1,
    country = 'US',
    -- rts_set = 1500,
    -- frag_set = 1532,
    -- nowmm = 0,
    set_11w = 1,


    -- ESSID used for client network.
    ap = {
      ssid = 'KiwiNET',
      -- disabled = true, (optional)

      -- Configuration for a backward compatible OWE network below.
      owe_ssid = 'KiwiNET_owe', -- (optional - SSID for OWE client network)
      owe_transition_mode = true, -- (optional - enables transition-mode - requires ssid as well as owe_ssid)
    },

    mesh = {
      id = 'osE5pSqlo',
      -- disabled = true,
    },

  },

  -- Wireless configuration for 5 GHz interfaces.
  -- This should be equal to the 2.4 GHz variant, except
  -- for channel.
  wifi5 = {
    channel = 44,
    -- outdoor_chanlist = '100-140',
    htmode = 'HT40+',
    distance = 50,
    tx_power = 30,
    htmode_noscan = 1,
    country = 'US',
    -- rts_set = 1500,
    -- frag_set = 1532,
    -- nowmm = 0,
    set_11w = 1,

    ap = {
      ssid = 'KiwiNET',

      owe_ssid = 'KiwiNET_owe',
      owe_transition_mode = true,
    },

    mesh = {
      id = 'osE5pSqlo',
      -- disabled = true,
    },

  },

  mesh = {
    vxlan = true,
    batman_adv = {
      gw_sel_class = 3,
      routing_algo = 'BATMAN_IV',
    },
  },
  
  dns = {
    servers = { 'fd10:b4dc:4b1e::a0a:2', 'fd10:b4dc:4b1e::a0a:102'},
  },

  -- The next node feature allows clients to always reach the node it is
  -- connected to using a known IP address.
  next_node = {
    name = { 'nextnode.kiwinet.eu', 'nextnode', 'nn' },
    -- anycast IPs of all nodes
    ip4 = '10.10.19.254',
    ip6 = 'fd10:b4dc:4b1e::1',

    -- anycast MAC of all nodes
    mac = '02:00:0a:0a:00:01',
  },

  mesh_vpn = {

    fastd = {
      groups = {
        backbone = {
          -- Limit number of connected peers to reduce bandwidth.
          limit = 1,

          -- List of peers.
          peers = {
            gw01 = {
              key = 'ce7c0ea3a8fe408b8067b75367ffb0a265e06c3b19d96d6147b06e163906e10a',

              -- This is a list, so you might add multiple entries.
              remotes = {
                '"vpn.kiwinet.eu" port 10001',
              },
            },
            gw02 = {
              key = 'ce7c0ea3a8fe408b8067b75367ffb0a265e06c3b19d96d6147b06e163906e10a',

              -- This is a list, so you might add multiple entries.
              remotes = {
                '"b1.kiwinet.eu" port 10001',
              },
            },
          },
        },
      },
    },

     -- tuneldigger
    tunneldigger = {
      brokers = {'vpn.kiwinet.eu:11001', 'b1.kiwinet.eu:11001', 'b2.kiwinet.eu:11001'},
    },
  },



  -- more domain specific config follows below
}
