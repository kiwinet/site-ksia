{
  -- Used for generated hostnames, e.g. freifunk-abcdef123456. (optional)
  hostname_prefix = '',

  -- Name of the community.
  site_name = 'Kiwinet Å iauliai 2.4Ghz - 4ch, 5Ghz - 44ch',

  -- Shorthand of the community.
  site_code = 'ksia',

  -- 32 bytes of random data, encoded in hexadecimal
  -- This data must be unique among all sites and domains!
  -- Can be generated using: echo $(hexdump -v -n 32 -e '1/1 "%02x"' </dev/urandom)
  domain_seed = 'f3ba9f2a4f1c0515bd36a3dc99251466d68d317eded1d78cadaa7b627f512e06',

  -- Prefixes used within the mesh. Both are required.
  prefix4 = '10.10.16.0/22',
  prefix6 = 'fd10:b4dc:4b1e::/64',

  -- Timezone of your community.
  -- See http://wiki.openwrt.org/doc/uci/system#time_zones
  timezone = 'EET-2EEST,M3.5.0/3,M10.5.0/4',

  -- List of NTP servers in your community.
  -- Must be reachable using IPv6!
  ntp_servers = {'6.ntp.kiwinet.eu'},

  opkg = {
    openwrt = 'http://downloads.openwrt.org/snapshots/packages/%A',
    extra = {
      modules = 'http://6.siauliai.kiwinet.eu/firmware/experimental/modules/gluon-%GS-%GR/%S',
    },
  },
    
  -- Wireless regulatory domain of your community.
  regdom = 'US',

  -- Wireless configuration for 2.4 GHz interfaces.
  wifi24 = {
    -- Wireless channel.
    channel = 4,
    htmode = 'HT40+',
    distance = 50,
    require_mode = 'g',
    tx_power = 30,
    htmode_noscan = 1,
    country = 'US',
    -- rts_set = 1500,
    -- frag_set = 1532,
    -- nowmm = 0,
    set_11w = 1,


    -- ESSID used for client network.
    ap = {
      ssid = 'KiwiNET',
      -- disabled = true, (optional)
    },

    mesh = {
      id = 'osE5pSqlo',
      mcast_rate = 12000,
      disabled = false,
    },

    ibss = {
      ssid = 'ksia-mesh-g',
      bssid = '02:0E:8E:1E:61:18',
      mcast_rate = 12000,
      disabled = false,
    },
  },

  -- Wireless configuration for 5 GHz interfaces.
  -- This should be equal to the 2.4 GHz variant, except
  -- for channel.
  wifi5 = {
    channel = 44,
    htmode = 'HT40+',
    distance = 50,
    tx_power = 30,
    htmode_noscan = 1,
    country = 'US',
   -- rts_set = 1500,
   -- frag_set = 1532,
   -- nowmm = 0,
   set_11w = 1,

    ap = {
      ssid = 'KiwiNET',
    },
    mesh = {
      id = 'osE5pSqlo',
      mcast_rate = 12000,
      disabled = false,
    },
    ibss = {
      ssid = 'ksia-mesh-a',
      bssid = '02:0E:8E:1E:61:19',
      mcast_rate = 12000,
      disabled = false,
    },
  },

  -- The next node feature allows clients to always reach the node it is
  -- connected to using a known IP address.
  next_node = {
    -- anycast IPs of all nodes
    ip4 = '10.10.19.254',
    ip6 = 'fd10:b4dc:4b1e::1',

    -- anycast MAC of all nodes
    mac = '02:00:0a:0a:00:01',
  },

  -- Options specific to routing protocols (optional)
  mesh = {
    vxlan = false,
    -- filter_membership_reports = true,
    batman_adv = {
      gw_sel_class = 3,
      routing_algo = 'BATMAN_IV', --BATMAN_IV_LEGACY (mesh-batman-adv-14), BATMAN_IV (mesh-batman-adv-15), BATMAN_V (mesh-batman-adv-15)
    },
  },

  mesh_vpn = {
    enabled = true,
    mtu = 1312,
    -- pubkey_privacy = true,

    fastd = {
      enabled = false,
      methods = {'salsa2012+umac'},
      configurable = true,
      syslog_level = 'warn',
      mtu = 1312,

      groups = {
        backbone = {
          -- Limit number of connected peers to reduce bandwidth.
          limit = 1,

          -- List of peers.
          peers = {
            gw01 = {
              key = 'ce7c0ea3a8fe408b8067b75367ffb0a265e06c3b19d96d6147b06e163906e10a',

              -- This is a list, so you might add multiple entries.
              remotes = {
                '"vpn.kiwinet.eu" port 10001',
              },
            },
            gw02 = {
              key = 'ce7c0ea3a8fe408b8067b75367ffb0a265e06c3b19d96d6147b06e163906e10a',

              -- This is a list, so you might add multiple entries.
              remotes = {
                '"b1.kiwinet.eu" port 10001',
              },
            },
          },
        },
        -- Optional: additional peer groups, possibly with other limits
        -- peertopeer = {
        --   limit = 10,
        --   peers = { ... },
        -- },
      },
    },

     -- tuneldigger
    tunneldigger = {
      enabled = true,
      mtu = 1312,
      brokers = {'vpn.kiwinet.eu:11001', 'b1.kiwinet.eu:11001', 'b2.kiwinet.eu:11001'},
    },

    bandwidth_limit = {
      enabled = false,

      -- (kbit/s).
      egress = 1200,
      ingress = 12000,
    },
  },

  mesh_on_wan = false,
  mesh_on_lan = false,
  -- poe_passthrough = false,

  dns = {
    servers = { 'fd10:b4dc:4b1e::a0a:2', 'fd10:b4dc:4b1e::a0a:102'},
  },

  autoupdater = {
    branch = 'experimental',
    branches = {
      stable = {
        name = 'stable',
        mirrors = {'http://6.siauliai.kiwinet.eu/firmware/stable/images/sysupgrade'},
        probability = 0.5,
        good_signatures = 1,
        pubkeys = {
                'e41bee3cb27710be3175537151eef14b0d438c6446ce2326e2f0e3b1741f57f7', --  Buildserver
        },
      },

      beta = {
        name = 'beta',
        mirrors = {'http://6.siauliai.kiwinet.eu/firmware/beta/images/sysupgrade'},
        probability = 0.5,
        good_signatures = 1,
        pubkeys = {
                'e41bee3cb27710be3175537151eef14b0d438c6446ce2326e2f0e3b1741f57f7', --  Buildserver
        },
      },

      experimental = {
        name = 'experimental',
        mirrors = {'http://6.siauliai.kiwinet.eu/firmware/experimental/images/sysupgrade'},
        probability = 0.5,
        good_signatures = 1,
        pubkeys = {
                'e41bee3cb27710be3175537151eef14b0d438c6446ce2326e2f0e3b1741f57f7', --  Buildserver
        },
      },
    },
  },

  -- syslog = {
  --   ip = "2001:db8::1",
  --   port = 514,
  --   proto = "udp",
  -- },

  config_mode = {
    geo_location = {
      show_altitude = false,
    },
    remote_login = {
      show_password_form = true,
      min_password_length = 8,
    },
  },

  roles = {
     default = 'node',
     list = {
       'node',
       'test',
       'backbone',
       'service',
     },
   },

  -- Skip setup mode (config mode) on first boot
  setup_mode = {
  --  skip = true,
    owner = {
      obligatory = true
    }
  },
}